#!/usr/bin/perl
use strict;
use warnings;
use AnyEvent;
use Coro;
use Coro::LWP;
use LWP::UserAgent;
use HTTP::Request::Common;
use JSON::XS;
use Term::ANSIColor;

binmode STDOUT, ":utf8";

my $ua = LWP::UserAgent->new;
$ua->default_header('X-Remedie-Client' => 'CLI');

my $api_call = sub {
    my($method, $path, $args) = @_;
    my $uri = URI->new("http://localhost:10010/rpc$path");

    my $res;
    if ($method eq 'get' && $args) {
        $uri->query_form(%$args);
        $res = $ua->get($uri);
    } else {
        $res = $ua->$method($uri, $args);
    }

    return JSON::XS->new->decode($res->content);
};

my @channels = @ARGV ? get_channels(@ARGV) : all_channels();

my @coros;
for my $channel (@channels) {
    push @coros, sub { 
        $Coro::current->desc("Fetch");
        my $data = $api_call->("post", "/channel/refresh", { id => $channel->{id} });
        my $new = $data->{channel}{unwatched_count} - $channel->{unwatched_count};
        printf "%d: %s updated %s\n",
           $channel->{id}, $data->{channel}{name}, ($new ? colored(['red'], "($new)") : "");
    };
}

my $max_concurrency = 20;

my $w = AnyEvent->timer(
    after => 0, interval => 1,
    cb => sub {
        my @running = grep $_->desc eq 'Fetch', Coro::State::list;
        my $to_run  = $max_concurrency - scalar @running;
        if (@coros && $to_run > 0) {
            my @run_coros = splice @coros, 0, $to_run;
            async \&$_ for @run_coros;
            warn sprintf "%d threads queued. %d threads remaining.\n",
                scalar(@run_coros), scalar(@coros);
        } else {
            exit if @running == 0;
        }
    },
);

schedule;

sub get_channels {
    my @ids = @_;
    map $api_call->("get", "/channel/show", { id => $_ })->{channel}, @ids;
}

sub all_channels {
    @{ $api_call->("get", "/channel/load")->{channels} };
}
