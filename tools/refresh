#!/usr/bin/perl
use strict;
use warnings;
use Coro;
use Coro::AnyEvent;
use Coro::LWP;
use AnyEvent;
use AnyEvent::HTTP;
use LWP::UserAgent;
use HTTP::Request::Common;
use JSON::XS;
use Term::ANSIColor;
use Time::HiRes;

binmode STDOUT, ":utf8";

my $ua = LWP::UserAgent->new;
$ua->default_header('X-Remedie-Client' => 'CLI');

my $api_call = sub {
    my($method, $path, $args) = @_;
    my $uri = URI->new("http://localhost:10010/rpc$path");

    my $res;
    if ($method eq 'get') {
        $uri->query_form(%$args) if $args;
        $res = $ua->get($uri);
    } else {
        $res = $ua->$method($uri, $args);
    }

    return JSON::XS->new->decode($res->content);
};

my $interval = 60 * 60;
my %unwatched;

# refresh
my $w = AnyEvent->timer(
    after => 0,
    interval => $interval,
    cb => sub {
        my @channels = @ARGV ? get_channels(@ARGV) : all_channels();
        for my $channel (@channels) {
            $unwatched{$channel->{id}} = $channel->{unwatched_count};
        }
        $api_call->("post", "/channel/refresh", [ map { ("id", $_->{id}) } @channels ]);
    },
);

my $session = Time::HiRes::gettimeofday;
my $long_poll; $long_poll = sub {
    http_get "http://localhost:10010/rpc/events/poll?s=$session", sub {
        my $event = JSON::XS->new->decode($_[0]);
        for my $data (@$event) {
            my $new = $data->{channel}{unwatched_count} - $unwatched{$data->{channel}{id}};
            printf "%d: %s updated %s\n",
                $data->{channel}{id}, $data->{channel}{name}, ($new ? colored(['red'], "($new)") : "");
        }
        $long_poll->();
    };
};

my $c = AnyEvent->timer(
    after => 0,
    cb => $long_poll,
);

AnyEvent->condvar->wait;

sub get_channels {
    my @ids = @_;
    map $api_call->("get", "/channel/show", { id => $_ })->{channel}, @ids;
}

sub all_channels {
    @{ $api_call->("get", "/channel/load")->{channels} };
}
